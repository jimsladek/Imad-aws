import mysql.connector
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# Connection à la base de données
connection = mysql.connector.connect(
    host='172.17.0.2',
    port=3306,
    user='root',
    password='password',
    database='products_db'
)

@app.route('/api/v1/employees', methods=['GET', 'POST'])
def manage_employees():
    with connection.cursor() as cursor:
        if request.method == 'GET':
            # Exécuter une requête SELECT pour récupérer tous les employés
            cursor.execute('SELECT * FROM employees')
            employees = cursor.fetchall()
            return jsonify({'employees': employees})

        if request.method == 'POST':
            # Récupérer les données de l'employé depuis le corps de la requête
            data = request.get_json()
            first_name = data.get('firstName')
            last_name = data.get('lastName')
            email_id = data.get('emailId')

            # Vérifier si les données sont valides
            if not first_name or not last_name or not email_id:
                return jsonify({'error': 'Invalid data'})

            # Exécuter une requête INSERT pour créer un nouvel employé
            cursor.execute('INSERT INTO employees (firstName, lastName, emailId) VALUES (%s, %s, %s)', (firstName, lastName, emailId))
            connection.commit()
            return jsonify({'result': 'Employee created'})

@app.route('/api/v1/employees/<int:employee_id>', methods=['PUT', 'DELETE'])
def manage_employee(employee_id):
    with connection.cursor() as cursor:
        # Exécuter une requête SELECT pour récupérer l'employé
        cursor.execute('SELECT * FROM employees WHERE id=%s', (employee_id,))
        employee = cursor.fetchone()

        if employee is None:
            return jsonify({'error': 'Employee not found'})

        if request.method == 'PUT':
            # Récupérer les données de l'employé depuis le corps de la requête
            data = request.get_json()
            first_name = data.get('firstName')
            last_name = data.get('lastName')
            email_id = data.get('emailId')

            # Vérifier si les données sont valides
            if not first_name or not last_name or not email_id:
                return jsonify({'error': 'Invalid data'})

            # Exécuter une requête UPDATE pour mettre à jour l'employé
            cursor.execute('UPDATE employees SET first_name=%s, last_name=%s, email_id=%s WHERE id=%s', (first_name, last_name, email_id, employee_id))
            connection.commit()
            return jsonify({'result': 'Employee updated'})

        if request.method == 'DELETE':
            # Exécuter une requête DELETE pour supprimer l'employé
            cursor.execute('DELETE FROM employees WHERE id=%s', (employee_id,))
            connection.commit()
            return jsonify({'result': 'Employee deleted'})


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
